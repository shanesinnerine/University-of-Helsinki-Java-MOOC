[{"className":"EmployeesTest","methodName":"hasEnumEducation","pointNames":["10-16.1"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"enumHasCorrectValues","pointNames":["10-16.1"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasClassPerson","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"PersonHasCorrectConstructor","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"PersonHasCorrectObjectVariables","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"PersonToString","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"PersonnToString2","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"testGetEducation","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"getEducationThrowsNoError","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"getEducationWorks","pointNames":["10-16.2"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasEmployeesClass","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"employeesHasCorrectConstructor","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasMethodAddPerson","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasMethodAddList","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasMethodPrint","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"printingWorks1","pointNames":["10-16.3"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); \nt.add(h); \nt.print(), \noutput should contain \"Arto, PHD\"\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); \nt.add(h); \nt.print(), \noutput should contain \"Arto, PHD\"\n","stackTrace":[{"declaringClass":"java.util.Arrays","methodName":"copyOf","fileName":"Arrays.java","lineNumber":3745},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"grow","fileName":"ByteArrayOutputStream.java","lineNumber":120},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"ensureCapacity","fileName":"ByteArrayOutputStream.java","lineNumber":95},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"write","fileName":"ByteArrayOutputStream.java","lineNumber":156},{"declaringClass":"java.io.PrintStream","methodName":"write","fileName":"PrintStream.java","lineNumber":559},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"writeBytes","fileName":"StreamEncoder.java","lineNumber":233},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"implFlushBuffer","fileName":"StreamEncoder.java","lineNumber":312},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"flushBuffer","fileName":"StreamEncoder.java","lineNumber":104},{"declaringClass":"java.io.OutputStreamWriter","methodName":"flushBuffer","fileName":"OutputStreamWriter.java","lineNumber":184},{"declaringClass":"java.io.PrintStream","methodName":"write","fileName":"PrintStream.java","lineNumber":606},{"declaringClass":"java.io.PrintStream","methodName":"print","fileName":"PrintStream.java","lineNumber":745},{"declaringClass":"java.io.PrintStream","methodName":"println","fileName":"PrintStream.java","lineNumber":899},{"declaringClass":"Employees","methodName":"print","fileName":"Employees.java","lineNumber":35},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"jdk.internal.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":566},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.ReflectionUtils","methodName":"invokeMethod","fileName":"ReflectionUtils.java","lineNumber":508},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeMethodOn","fileName":"Reflex.java","lineNumber":603},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeMethod","fileName":"Reflex.java","lineNumber":594},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeImpl","fileName":"Reflex.java","lineNumber":564},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef0","methodName":"invoke","fileName":"Reflex.java","lineNumber":729},{"declaringClass":"EmployeesTest","methodName":"print","fileName":"EmployeesTest.java","lineNumber":218},{"declaringClass":"EmployeesTest","methodName":"printingWorks1","fileName":"EmployeesTest.java","lineNumber":280},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"jdk.internal.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":566},{"declaringClass":"org.junit.runners.model.FrameworkMethod$1","methodName":"runReflectiveCall","fileName":"FrameworkMethod.java","lineNumber":47},{"declaringClass":"org.junit.internal.runners.model.ReflectiveCallable","methodName":"run","fileName":"ReflectiveCallable.java","lineNumber":12},{"declaringClass":"org.junit.runners.model.FrameworkMethod","methodName":"invokeExplosively","fileName":"FrameworkMethod.java","lineNumber":44},{"declaringClass":"org.junit.internal.runners.statements.InvokeMethod","methodName":"evaluate","fileName":"InvokeMethod.java","lineNumber":17}]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"printingWorks2","pointNames":["10-16.3"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code t \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); \nt.add(h); \nh2 \u003d new Person(\"Pekka\", Education.HS); \nt.add(h2); \nt.print();\noutput should contain \"Arto, PHD\"\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code t \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); \nt.add(h); \nh2 \u003d new Person(\"Pekka\", Education.HS); \nt.add(h2); \nt.print();\noutput should contain \"Arto, PHD\"\n","stackTrace":[{"declaringClass":"java.util.Arrays","methodName":"copyOf","fileName":"Arrays.java","lineNumber":3745},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"grow","fileName":"ByteArrayOutputStream.java","lineNumber":120},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"ensureCapacity","fileName":"ByteArrayOutputStream.java","lineNumber":95},{"declaringClass":"java.io.ByteArrayOutputStream","methodName":"write","fileName":"ByteArrayOutputStream.java","lineNumber":156},{"declaringClass":"java.io.PrintStream","methodName":"write","fileName":"PrintStream.java","lineNumber":559},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"writeBytes","fileName":"StreamEncoder.java","lineNumber":233},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"implFlushBuffer","fileName":"StreamEncoder.java","lineNumber":312},{"declaringClass":"sun.nio.cs.StreamEncoder","methodName":"flushBuffer","fileName":"StreamEncoder.java","lineNumber":104},{"declaringClass":"java.io.OutputStreamWriter","methodName":"flushBuffer","fileName":"OutputStreamWriter.java","lineNumber":184},{"declaringClass":"java.io.PrintStream","methodName":"newLine","fileName":"PrintStream.java","lineNumber":625},{"declaringClass":"java.io.PrintStream","methodName":"println","fileName":"PrintStream.java","lineNumber":900},{"declaringClass":"Employees","methodName":"print","fileName":"Employees.java","lineNumber":35},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"jdk.internal.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":566},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.ReflectionUtils","methodName":"invokeMethod","fileName":"ReflectionUtils.java","lineNumber":508},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeMethodOn","fileName":"Reflex.java","lineNumber":603},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeMethod","fileName":"Reflex.java","lineNumber":594},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef","methodName":"invokeImpl","fileName":"Reflex.java","lineNumber":564},{"declaringClass":"fi.helsinki.cs.tmc.edutestutils.Reflex$MethodRef0","methodName":"invoke","fileName":"Reflex.java","lineNumber":729},{"declaringClass":"EmployeesTest","methodName":"print","fileName":"EmployeesTest.java","lineNumber":218},{"declaringClass":"EmployeesTest","methodName":"printingWorks2","fileName":"EmployeesTest.java","lineNumber":308},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"jdk.internal.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":566},{"declaringClass":"org.junit.runners.model.FrameworkMethod$1","methodName":"runReflectiveCall","fileName":"FrameworkMethod.java","lineNumber":47},{"declaringClass":"org.junit.internal.runners.model.ReflectiveCallable","methodName":"run","fileName":"ReflectiveCallable.java","lineNumber":12},{"declaringClass":"org.junit.runners.model.FrameworkMethod","methodName":"invokeExplosively","fileName":"FrameworkMethod.java","lineNumber":44},{"declaringClass":"org.junit.internal.runners.statements.InvokeMethod","methodName":"evaluate","fileName":"InvokeMethod.java","lineNumber":17},{"declaringClass":"org.junit.internal.runners.statements.RunBefores","methodName":"evaluate","fileName":"RunBefores.java","lineNumber":26}]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"printingWorks3","pointNames":["10-16.3"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nArrayList\u003cPerson\u003e list \u003d new ...; \nlist.add((\"Arto\", Education.PHD); \nlist.add(\"Pekka\", Education.HS); \nt.add(list); \nt.print(); \noutput should contain \"Arto, PHD\"\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nArrayList\u003cPerson\u003e list \u003d new ...; \nlist.add((\"Arto\", Education.PHD); \nlist.add(\"Pekka\", Education.HS); \nt.add(list); \nt.print(); \noutput should contain \"Arto, PHD\"\n","stackTrace":[]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"noUnnecessaryObjectVariables","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"printingUsesIterator","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"hasMethodPrintEducation","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"filteredPrintingWorks","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"filteredPrintingWorks1b","pointNames":["10-16.3"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"filteredPrintingUsesIterator","pointNames":["10-16.3"],"message":"Class Employees method print(Education education) must use an iterator, check the material for details!","exception":{"className":"java.lang.AssertionError","message":"Class Employees method print(Education education) must use an iterator, check the material for details!","stackTrace":[{"declaringClass":"org.junit.Assert","methodName":"fail","fileName":"Assert.java","lineNumber":88},{"declaringClass":"org.junit.Assert","methodName":"assertTrue","fileName":"Assert.java","lineNumber":41},{"declaringClass":"EmployeesTest","methodName":"usesIterator2","fileName":"EmployeesTest.java","lineNumber":706},{"declaringClass":"EmployeesTest","methodName":"filteredPrintingUsesIterator","fileName":"EmployeesTest.java","lineNumber":420},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"jdk.internal.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"jdk.internal.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":566},{"declaringClass":"org.junit.runners.model.FrameworkMethod$1","methodName":"runReflectiveCall","fileName":"FrameworkMethod.java","lineNumber":47},{"declaringClass":"org.junit.internal.runners.model.ReflectiveCallable","methodName":"run","fileName":"ReflectiveCallable.java","lineNumber":12},{"declaringClass":"org.junit.runners.model.FrameworkMethod","methodName":"invokeExplosively","fileName":"FrameworkMethod.java","lineNumber":44},{"declaringClass":"org.junit.internal.runners.statements.InvokeMethod","methodName":"evaluate","fileName":"InvokeMethod.java","lineNumber":17},{"declaringClass":"org.junit.internal.runners.statements.RunBefores","methodName":"evaluate","fileName":"RunBefores.java","lineNumber":26},{"declaringClass":"org.junit.runners.ParentRunner","methodName":"runLeaf","fileName":"ParentRunner.java","lineNumber":271},{"declaringClass":"org.junit.runners.BlockJUnit4ClassRunner","methodName":"runChild","fileName":"BlockJUnit4ClassRunner.java","lineNumber":70},{"declaringClass":"org.junit.runners.BlockJUnit4ClassRunner","methodName":"runChild","fileName":"BlockJUnit4ClassRunner.java","lineNumber":50},{"declaringClass":"org.junit.runners.ParentRunner$3","methodName":"run","fileName":"ParentRunner.java","lineNumber":238},{"declaringClass":"org.junit.runners.ParentRunner$1","methodName":"schedule","fileName":"ParentRunner.java","lineNumber":63},{"declaringClass":"org.junit.runners.ParentRunner","methodName":"runChildren","fileName":"ParentRunner.java","lineNumber":236},{"declaringClass":"org.junit.runners.ParentRunner","methodName":"access$000","fileName":"ParentRunner.java","lineNumber":53},{"declaringClass":"org.junit.runners.ParentRunner$2","methodName":"evaluate","fileName":"ParentRunner.java","lineNumber":229},{"declaringClass":"org.junit.runners.ParentRunner","methodName":"run","fileName":"ParentRunner.java","lineNumber":309},{"declaringClass":"fi.helsinki.cs.tmc.testrunner.TestRunner$TestingRunnable","methodName":"runTestCase","fileName":"TestRunner.java","lineNumber":134},{"declaringClass":"fi.helsinki.cs.tmc.testrunner.TestRunner$TestingRunnable","methodName":"doRun","fileName":"TestRunner.java","lineNumber":89},{"declaringClass":"fi.helsinki.cs.tmc.testrunner.TestRunner$TestingRunnable","methodName":"run","fileName":"TestRunner.java","lineNumber":70},{"declaringClass":"java.lang.Thread","methodName":"run","fileName":"Thread.java","lineNumber":834}]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"hasMethodFire","pointNames":["10-16.4"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"firingWorks","pointNames":["10-16.4"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"firingUsesIterator","pointNames":["10-16.4"],"status":"PASSED"},{"className":"EmployeesTest","methodName":"firingWorks2","pointNames":["10-16.4"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.PHD);\n t.print();\n. Only Pekka should be printed\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.PHD);\n t.print();\n. Only Pekka should be printed\n","stackTrace":[]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"firingWorks3","pointNames":["10-16.4"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.MA);\n t.print();\n All should be printed\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.MA);\n t.print();\n All should be printed\n","stackTrace":[]},"status":"FAILED"},{"className":"EmployeesTest","methodName":"firingWorks4","pointNames":["10-16.4"],"message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.BA);\n t.print(); \nArto and Metti should be printed\n","exception":{"className":"java.lang.AssertionError","message":"OutOfMemoryError: Java heap space, in call print(). Check code \nt \u003d new Employees(); \nh \u003d new Person(\"Arto\", Education.PHD); t.add(h); \nh \u003d new Person(\"Pekka\", Education.BA); t.add(h); \nh \u003d new Person(\"Matti\", Education.PHD); t.add(h); \nt.fire(Education.BA);\n t.print(); \nArto and Metti should be printed\n","stackTrace":[]},"status":"FAILED"}]